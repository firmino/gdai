{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"G-DAI Documentation Welcome to the documentation for G-DAI , a multi-tenant vector store with advanced semantic search and auditable answer capabilities. What is G-DAI? G-DAI is an open-source platform that enables organizations to: - Store and manage document embeddings in a vector database. - Support multiple tenants (organizations, teams, or projects) with isolated data. - Use semantic search and Retrieval-Augmented Generation (RAG) to answer questions based on ingested documents. - Ensure every answer is auditable and traceable to its original source. Key Features Multi-Tenant Management : Isolate data and search for different clients. Semantic Search : Retrieve information using vector similarity and advanced semantic techniques. RAG and Beyond : Combine retrieval with generative models and other semantic approaches. Auditable Answers : Every answer includes references to the source documents. API-First : RESTful API for integration. Getting Started Installation Usage API Reference Learn More Contributing Code of Conduct About the Project GDAI - Generative Document AI GDAI is a containerized, AI-powered application that leverages a set of specialized services to provide semantic search, secure user authentication, and a scalable API. The application uses Docker Compose for local development and production deployment, ensuring all services work together seamlessly. 1. Getting Started Running the Application To start all services defined in the project, simply run: docker-compose up For running the services in detached mode, use: docker-compose up -d SSL Certificate Generation Before deploying into production, generate SSL certificates for your domains: certbot certonly --standalone -d gdai.site -d www.gdai.site --email firminodefaria@gmail.com --agree-tos --non-interactive --config-dir ./certbot/config --work-dir ./certbot/work --logs-dir ./certbot/logs Make sure ports 80 and 443 are available when running Certbot. 2. Project Structure gdai/ \u251c\u2500\u2500 docker-compose.yml # Docker Compose configuration \u251c\u2500\u2500 .github/ # Github Actions configuration \u2502\u2500\u2500 infra/ # Infrastructure configuration files \u2502\u2500\u2500 src/ # Application \u2502\u2500\u2500 Dockerfile.yml # Dockerfile for project application \u2502\u2500\u2500 pyproject.yml # python project configuration \u2502\u2500\u2500 uv.lock # uv.lock file for project \u2514\u2500\u2500 README.md # Project documentation Note: Additional configuration files (e.g., for Nginx or Certbot) may be provided in external folders or through mounted volumes. 3. Services Infrastructure The services defined in the docker-compose.yml file combine to provide a full-featured environment for GDAI. Below is an explanation of each service: Weaviate Image: semitechnologies/weaviate:latest Purpose: Provides a vector search engine for semantic similarity searches. Configuration: Environment variables set options such as query defaults and anonymous access. Persists data with a named volume ( weaviate_data ). Exposes port 8080 internally and maps it for inter-service communication. Supertokens Image: supertokens/supertokens-postgresql:latest Purpose: Manages secure user authentication and session management. Configuration: Environment variables configure database connection details. It depends on the postgres service to operate. Exposes port 3567 for authentication API calls. Postgres Image: postgres:13-alpine Purpose: Acts as the primary database service supporting both Supertokens and potentially other application data. Configuration: Environment variables define the database, user, and password. Persists data with a named volume ( postgres_data ). FastAPI Application (fastapi-app) Container Name: fastapi-app Purpose: Runs the main API application built with FastAPI. Configuration: Built from the local Dockerfile. Exposes the application on port 8000. Sets environment variables to connect to the Weaviate and Supertokens services. Depends on both weaviate and supertokens to ensure proper startup order. Nginx Image: nginx:alpine Purpose: Acts as a reverse proxy and TLS terminator in a production environment. Configuration: Maps host ports 80 and 443 to the container. Mounts configuration files (from infra/nginx/gdai.conf ) and SSL certificates. Depends on the FastAPI application to start before routing traffic. 4. Configuration Environment Variables (.env) The application uses a .env file for configuration. Below are the main keys you must set: GDAI_LOG_LEVEL=DEBUG GDAI_LOG_FORMAT=[%(asctime)s] [GDAI] [%(levelname)s]: %(message)s GDAI_LOG_FILE_ENABLED=false GDAI_LOG_FILE_PATH=/home/fabricio/projects/g-dai/logs/gdai.log GDAI_LOG_FILE_MAX_SIZE_MB=10 GDAI_LOG_FILE_BACKUP_COUNT=5 RABBIT_MQ_HOST=localhost RABBIT_MQ_PORT=5672 RABBIT_MQ_USER=rabbitmq RABBIT_MQ_PASSWORD=rabbitmq PGVECTOR_USER=testuser PGVECTOR_PASSWORD=testpwd PGVECTOR_DATABASE=vectordb PGVECTOR_HOST=localhost PGVECTOR_PORT=5555 PGVECTOR_MIN_POOL_CONNECTIONS=2 PGVECTOR_MAX_POOL_CONNECTIONS=10 DOCUMENT_EXTRACTOR_FOLDER_SOURCE_PATH=/home/fabricio/projects/g-dai/DOC_FOLDER/raw DOCUMENT_EXTRACTOR_FOLDER_TARGET_PATH=/home/fabricio/projects/g-dai/DOC_FOLDER/extracted DOCUMENT_EXTRACTOR_MAX_FILE_SIZE_MB=100 DOCUMENT_EXTRACTOR=docling DOCUMENT_EXTRACTOR_MAX_RETRIES=3 DOCUMENT_EXTRACTOR_RETRY_DELAY=5 DOCUMENT_EXTRACTOR_QUEUE=extract_data EMBEDDING_FOLDER_SOURCE_PATH=/home/fabricio/projects/g-dai/DOC_FOLDER/extracted EMBEDDING_CHUNK_SIZE=1000 EMBEDDING_CHUNK_OVERLAP=10 EMBEDDING_MAX_RETRIES=3 EMBEDDING_RETRY_DELAY=5 EMBEDDING_QUEUE=embedding_documents EMBEDDING_MAX_MEMORY_USAGE_PERCENT=90 EMBEDDING_MODEL=cohere/embed-v4.0 EMBEDDING_API_KEY=your-cohere-api-key SEARCH_LLM_MODEL=openai/gpt-4o SEARCH_LLM_API_KEY=your-openai-api-key SEARCH_LLM_MAX_TOKENS=1000 SEARCH_LLM_TEMPERATURE=0.7 Note: Replace your-cohere-api-key and your-openai-api-key with your actual API keys. 5. Deployment & Running Local Development Install Docker and Docker Compose (if not already installed). Clone the repository and copy .env.example to .env , then fill in the required values. Start all services: bash docker-compose up --build Or in detached mode: bash docker-compose up -d Access the API: By default, the FastAPI app will be available at http://localhost:8000 . Production Configure Nginx and SSL as described above. Ensure all environment variables are set securely. Use a process manager (e.g., systemd, Docker Compose in production mode). 6. API Usage Search Query Endpoint POST /search/query Request Body: json { \"tenant_id\": \"string\", \"query_id\": \"string\", \"query_text\": \"string\", \"chunks_limit\": 100 } Response: json { \"message\": \"string\", \"query_id\": \"string\", \"status\": \"success\", \"list_chunks\": [ ... ] } Document Upload Endpoint POST /search/document/upload Form Data: tenant_id : string document : file (PDF, etc) Response: json { \"message\": \"Document <filename> uploaded and queued for processing\", \"document_name\": \"<filename>\", \"tenant_id\": \"<tenant_id>\", \"status\": \"pending\" } 7. How to Use Upload a document via /search/document/upload (multipart form-data). Submit a search query via /search/query (JSON body). Results will be based on the processed documents for the given tenant. 8. Troubleshooting Check logs for errors: docker-compose logs or check the log file if enabled. Ensure all environment variables are set and valid. For database or broker issues, verify service health and credentials. 9. Contributing Fork the repository, create a feature branch, and submit a pull request. Please document new endpoints and configuration options. 10. License See LICENSE for details. Happy coding!","title":"Home"},{"location":"#g-dai-documentation","text":"Welcome to the documentation for G-DAI , a multi-tenant vector store with advanced semantic search and auditable answer capabilities.","title":"G-DAI Documentation"},{"location":"#what-is-g-dai","text":"G-DAI is an open-source platform that enables organizations to: - Store and manage document embeddings in a vector database. - Support multiple tenants (organizations, teams, or projects) with isolated data. - Use semantic search and Retrieval-Augmented Generation (RAG) to answer questions based on ingested documents. - Ensure every answer is auditable and traceable to its original source.","title":"What is G-DAI?"},{"location":"#key-features","text":"Multi-Tenant Management : Isolate data and search for different clients. Semantic Search : Retrieve information using vector similarity and advanced semantic techniques. RAG and Beyond : Combine retrieval with generative models and other semantic approaches. Auditable Answers : Every answer includes references to the source documents. API-First : RESTful API for integration.","title":"Key Features"},{"location":"#getting-started","text":"Installation Usage API Reference","title":"Getting Started"},{"location":"#learn-more","text":"Contributing Code of Conduct About the Project","title":"Learn More"},{"location":"#gdai-generative-document-ai","text":"GDAI is a containerized, AI-powered application that leverages a set of specialized services to provide semantic search, secure user authentication, and a scalable API. The application uses Docker Compose for local development and production deployment, ensuring all services work together seamlessly.","title":"GDAI - Generative Document AI"},{"location":"#1-getting-started","text":"","title":"1. Getting Started"},{"location":"#running-the-application","text":"To start all services defined in the project, simply run: docker-compose up For running the services in detached mode, use: docker-compose up -d","title":"Running the Application"},{"location":"#ssl-certificate-generation","text":"Before deploying into production, generate SSL certificates for your domains: certbot certonly --standalone -d gdai.site -d www.gdai.site --email firminodefaria@gmail.com --agree-tos --non-interactive --config-dir ./certbot/config --work-dir ./certbot/work --logs-dir ./certbot/logs Make sure ports 80 and 443 are available when running Certbot.","title":"SSL Certificate Generation"},{"location":"#2-project-structure","text":"gdai/ \u251c\u2500\u2500 docker-compose.yml # Docker Compose configuration \u251c\u2500\u2500 .github/ # Github Actions configuration \u2502\u2500\u2500 infra/ # Infrastructure configuration files \u2502\u2500\u2500 src/ # Application \u2502\u2500\u2500 Dockerfile.yml # Dockerfile for project application \u2502\u2500\u2500 pyproject.yml # python project configuration \u2502\u2500\u2500 uv.lock # uv.lock file for project \u2514\u2500\u2500 README.md # Project documentation Note: Additional configuration files (e.g., for Nginx or Certbot) may be provided in external folders or through mounted volumes.","title":"2. Project Structure"},{"location":"#3-services-infrastructure","text":"The services defined in the docker-compose.yml file combine to provide a full-featured environment for GDAI. Below is an explanation of each service:","title":"3. Services Infrastructure"},{"location":"#weaviate","text":"Image: semitechnologies/weaviate:latest Purpose: Provides a vector search engine for semantic similarity searches. Configuration: Environment variables set options such as query defaults and anonymous access. Persists data with a named volume ( weaviate_data ). Exposes port 8080 internally and maps it for inter-service communication.","title":"Weaviate"},{"location":"#supertokens","text":"Image: supertokens/supertokens-postgresql:latest Purpose: Manages secure user authentication and session management. Configuration: Environment variables configure database connection details. It depends on the postgres service to operate. Exposes port 3567 for authentication API calls.","title":"Supertokens"},{"location":"#postgres","text":"Image: postgres:13-alpine Purpose: Acts as the primary database service supporting both Supertokens and potentially other application data. Configuration: Environment variables define the database, user, and password. Persists data with a named volume ( postgres_data ).","title":"Postgres"},{"location":"#fastapi-application-fastapi-app","text":"Container Name: fastapi-app Purpose: Runs the main API application built with FastAPI. Configuration: Built from the local Dockerfile. Exposes the application on port 8000. Sets environment variables to connect to the Weaviate and Supertokens services. Depends on both weaviate and supertokens to ensure proper startup order.","title":"FastAPI Application (fastapi-app)"},{"location":"#nginx","text":"Image: nginx:alpine Purpose: Acts as a reverse proxy and TLS terminator in a production environment. Configuration: Maps host ports 80 and 443 to the container. Mounts configuration files (from infra/nginx/gdai.conf ) and SSL certificates. Depends on the FastAPI application to start before routing traffic.","title":"Nginx"},{"location":"#4-configuration","text":"","title":"4. Configuration"},{"location":"#environment-variables-env","text":"The application uses a .env file for configuration. Below are the main keys you must set: GDAI_LOG_LEVEL=DEBUG GDAI_LOG_FORMAT=[%(asctime)s] [GDAI] [%(levelname)s]: %(message)s GDAI_LOG_FILE_ENABLED=false GDAI_LOG_FILE_PATH=/home/fabricio/projects/g-dai/logs/gdai.log GDAI_LOG_FILE_MAX_SIZE_MB=10 GDAI_LOG_FILE_BACKUP_COUNT=5 RABBIT_MQ_HOST=localhost RABBIT_MQ_PORT=5672 RABBIT_MQ_USER=rabbitmq RABBIT_MQ_PASSWORD=rabbitmq PGVECTOR_USER=testuser PGVECTOR_PASSWORD=testpwd PGVECTOR_DATABASE=vectordb PGVECTOR_HOST=localhost PGVECTOR_PORT=5555 PGVECTOR_MIN_POOL_CONNECTIONS=2 PGVECTOR_MAX_POOL_CONNECTIONS=10 DOCUMENT_EXTRACTOR_FOLDER_SOURCE_PATH=/home/fabricio/projects/g-dai/DOC_FOLDER/raw DOCUMENT_EXTRACTOR_FOLDER_TARGET_PATH=/home/fabricio/projects/g-dai/DOC_FOLDER/extracted DOCUMENT_EXTRACTOR_MAX_FILE_SIZE_MB=100 DOCUMENT_EXTRACTOR=docling DOCUMENT_EXTRACTOR_MAX_RETRIES=3 DOCUMENT_EXTRACTOR_RETRY_DELAY=5 DOCUMENT_EXTRACTOR_QUEUE=extract_data EMBEDDING_FOLDER_SOURCE_PATH=/home/fabricio/projects/g-dai/DOC_FOLDER/extracted EMBEDDING_CHUNK_SIZE=1000 EMBEDDING_CHUNK_OVERLAP=10 EMBEDDING_MAX_RETRIES=3 EMBEDDING_RETRY_DELAY=5 EMBEDDING_QUEUE=embedding_documents EMBEDDING_MAX_MEMORY_USAGE_PERCENT=90 EMBEDDING_MODEL=cohere/embed-v4.0 EMBEDDING_API_KEY=your-cohere-api-key SEARCH_LLM_MODEL=openai/gpt-4o SEARCH_LLM_API_KEY=your-openai-api-key SEARCH_LLM_MAX_TOKENS=1000 SEARCH_LLM_TEMPERATURE=0.7 Note: Replace your-cohere-api-key and your-openai-api-key with your actual API keys.","title":"Environment Variables (.env)"},{"location":"#5-deployment-running","text":"","title":"5. Deployment &amp; Running"},{"location":"#local-development","text":"Install Docker and Docker Compose (if not already installed). Clone the repository and copy .env.example to .env , then fill in the required values. Start all services: bash docker-compose up --build Or in detached mode: bash docker-compose up -d Access the API: By default, the FastAPI app will be available at http://localhost:8000 .","title":"Local Development"},{"location":"#production","text":"Configure Nginx and SSL as described above. Ensure all environment variables are set securely. Use a process manager (e.g., systemd, Docker Compose in production mode).","title":"Production"},{"location":"#6-api-usage","text":"","title":"6. API Usage"},{"location":"#search-query-endpoint","text":"POST /search/query Request Body: json { \"tenant_id\": \"string\", \"query_id\": \"string\", \"query_text\": \"string\", \"chunks_limit\": 100 } Response: json { \"message\": \"string\", \"query_id\": \"string\", \"status\": \"success\", \"list_chunks\": [ ... ] }","title":"Search Query Endpoint"},{"location":"#document-upload-endpoint","text":"POST /search/document/upload Form Data: tenant_id : string document : file (PDF, etc) Response: json { \"message\": \"Document <filename> uploaded and queued for processing\", \"document_name\": \"<filename>\", \"tenant_id\": \"<tenant_id>\", \"status\": \"pending\" }","title":"Document Upload Endpoint"},{"location":"#7-how-to-use","text":"Upload a document via /search/document/upload (multipart form-data). Submit a search query via /search/query (JSON body). Results will be based on the processed documents for the given tenant.","title":"7. How to Use"},{"location":"#8-troubleshooting","text":"Check logs for errors: docker-compose logs or check the log file if enabled. Ensure all environment variables are set and valid. For database or broker issues, verify service health and credentials.","title":"8. Troubleshooting"},{"location":"#9-contributing","text":"Fork the repository, create a feature branch, and submit a pull request. Please document new endpoints and configuration options.","title":"9. Contributing"},{"location":"#10-license","text":"See LICENSE for details. Happy coding!","title":"10. License"},{"location":"about/","text":"About G-DAI G-DAI was created to address the growing need for trustworthy, explainable, and scalable document search and question-answering systems. As organizations increasingly rely on large collections of documents, ensuring that answers are both accurate and auditable becomes critical. Vision To empower organizations with a platform that not only delivers precise answers but also provides full transparency into the sources and reasoning behind those answers. Core Principles Transparency : Every answer is traceable to its source. Scalability : Designed for multi-tenant environments and large document collections. Flexibility : Supports various semantic and retrieval techniques. Community-Driven : Open to contributions and improvements from the community. Acknowledgements G-DAI builds upon open-source technologies such as PostgreSQL, pgvector, FastAPI, and modern NLP/LLM frameworks.","title":"About"},{"location":"about/#about-g-dai","text":"G-DAI was created to address the growing need for trustworthy, explainable, and scalable document search and question-answering systems. As organizations increasingly rely on large collections of documents, ensuring that answers are both accurate and auditable becomes critical.","title":"About G-DAI"},{"location":"about/#vision","text":"To empower organizations with a platform that not only delivers precise answers but also provides full transparency into the sources and reasoning behind those answers.","title":"Vision"},{"location":"about/#core-principles","text":"Transparency : Every answer is traceable to its source. Scalability : Designed for multi-tenant environments and large document collections. Flexibility : Supports various semantic and retrieval techniques. Community-Driven : Open to contributions and improvements from the community.","title":"Core Principles"},{"location":"about/#acknowledgements","text":"G-DAI builds upon open-source technologies such as PostgreSQL, pgvector, FastAPI, and modern NLP/LLM frameworks.","title":"Acknowledgements"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to a positive environment: - Using welcoming and inclusive language - Being respectful of differing viewpoints and experiences - Gracefully accepting constructive criticism - Showing empathy towards other community members Examples of unacceptable behavior: - The use of sexualized language or imagery - Trolling, insulting/derogatory comments, and personal or political attacks - Public or private harassment - Publishing others' private information without explicit permission Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [your-email@example.com]. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 2.1.","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to a positive environment: - Using welcoming and inclusive language - Being respectful of differing viewpoints and experiences - Gracefully accepting constructive criticism - Showing empathy towards other community members Examples of unacceptable behavior: - The use of sexualized language or imagery - Trolling, insulting/derogatory comments, and personal or political attacks - Public or private harassment - Publishing others' private information without explicit permission","title":"Our Standards"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [your-email@example.com]. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.1.","title":"Attribution"},{"location":"contributing/","text":"Contributing to G-DAI We welcome contributions from the community! Please follow these guidelines to help us maintain a high-quality project. Getting Started Installation Clone the repository: bash git clone https://github.com/your-org/g-dai.git cd g-dai Install dependencies: bash pip install -r requirements.txt Or use Docker Compose: bash docker-compose up --build Usage Run the API: bash python -m src.api.main Ingest documents by placing them in DOC_FOLDER/raw/ and using the provided scripts or API endpoints. Query the API for semantic search and auditable answers. How to Contribute Fork the repository and create your branch from main . Write clear, concise commit messages. Ensure your code passes linting and tests. Submit a pull request with a detailed description of your changes. Coding Standards Follow PEP8 and use Ruff for linting/formatting. Write tests for new features and bug fixes. Document your code and public APIs. Reporting Issues Use GitHub Issues to report bugs or request features. Provide as much detail as possible, including steps to reproduce and expected behavior. Community Be respectful and follow our Code of Conduct .","title":"Contributing"},{"location":"contributing/#contributing-to-g-dai","text":"We welcome contributions from the community! Please follow these guidelines to help us maintain a high-quality project.","title":"Contributing to G-DAI"},{"location":"contributing/#getting-started","text":"","title":"Getting Started"},{"location":"contributing/#installation","text":"Clone the repository: bash git clone https://github.com/your-org/g-dai.git cd g-dai Install dependencies: bash pip install -r requirements.txt Or use Docker Compose: bash docker-compose up --build","title":"Installation"},{"location":"contributing/#usage","text":"Run the API: bash python -m src.api.main Ingest documents by placing them in DOC_FOLDER/raw/ and using the provided scripts or API endpoints. Query the API for semantic search and auditable answers.","title":"Usage"},{"location":"contributing/#how-to-contribute","text":"Fork the repository and create your branch from main . Write clear, concise commit messages. Ensure your code passes linting and tests. Submit a pull request with a detailed description of your changes.","title":"How to Contribute"},{"location":"contributing/#coding-standards","text":"Follow PEP8 and use Ruff for linting/formatting. Write tests for new features and bug fixes. Document your code and public APIs.","title":"Coding Standards"},{"location":"contributing/#reporting-issues","text":"Use GitHub Issues to report bugs or request features. Provide as much detail as possible, including steps to reproduce and expected behavior.","title":"Reporting Issues"},{"location":"contributing/#community","text":"Be respectful and follow our Code of Conduct .","title":"Community"}]}